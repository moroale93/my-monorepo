name: Deployment

on:
  push:
    branches: [ main ]

  workflow_dispatch:

jobs:
  common:
    uses: ./.github/workflows/common.yml

  deploy-libraries:
    needs: [ common ]
    runs-on: ubuntu-latest
    environment: cicd

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: code-builds
      - name: Setup git email config
        run: git config --global user.email "$GIT_PUBLISHER_EMAIL"
        env:
            GIT_PUBLISHER_EMAIL: ${{ secrets.GIT_PUBLISHER_EMAIL }}
      - name: Setup git name config
        run: git config --global user.name "Automated Publisher"
      - name: Setup npm registry
        run: echo //registry.npmjs.org/:_authToken=${NPM_TOKEN} > .npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Setup npm configs
        run: echo "unsafe-perm=true" >> .npmrc
      - name: Skip npmrc changes
        run: git update-index --assume-unchanged .npmrc
      - name: Update versions
        run: yarn lerna version
      - name: Publish versions
        run: yarn lerna publish from-package

  deploy-application-to-staging:
    needs: [ common ]
    runs-on: ubuntu-latest
    environment: cicd

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: code-builds
          path: ./packages
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: install wrangler
        run: npm install -g @cloudflare/wrangler
      - name: Login to cloudflare
        run: echo $CF_API_TOKEN | wrangler config
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      - name: Deploy to staging apps
        run: yarn deploy staging
      - name: Create dns entry
        run: node scripts/deploy-application.js staging
        env:
          CF_EMAIL: ${{ secrets.CF_EMAIL }}
          CF_API_KEY: ${{ secrets.CF_API_KEY }}
          CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
